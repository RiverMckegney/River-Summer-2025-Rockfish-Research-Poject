# Glucose Analysis
# ANOVA Tests
# Testing general factor differences: Treatment & Parturition Outcome
# Two-Way ANOVA
glu_aov_int <- aov(Glu..mmol.L. ~ Pregnant.Or.Atresia * Ambient.Or.OAH, data = General_Samples)
summary(glu_aov_int)
# If Interaction not significant (p-value > 0.05), use additive model
glu_aov_additive <- aov(Glu..mmol.L. ~ Pregnant.Or.Atresia + Ambient.Or.OAH, data = General_Samples)
summary(glu_aov_additive)
# Post-Hoc Test:
# - Tukey's HSD test (parametric)
# - Scheirer-Ray-Hare test (non-parametric)
# - Aligned Ranked Transformation (ART): Nonparametric, robust against violations to normality and homoscedasticity
# - Ordinal Logistic Regression
# Tukey's Honestly Significant Difference Test (Parametric):
glu_tukey_test <- TukeyHSD(glu_aov_int)
print(glu_tukey_test)
glu_aov_int %>% tukey_hsd()
# Glucose
# ANOVA Tests
# Testing for differences in ambient parturition success metrics
# One-way ANOVA (parametric) or Kruskal-Wallis test (nonparametric)
glu_aov_ambient <- aov(Glu..mmol.L. ~ Consensus_Brood_Condition, data = Ambient_Only_Samples)
summary(glu_aov_ambient)
# Post-Hoc Test:
# - Tukey's HSD (parametric, normality & equal variance across groups)
# - Kruskal Wallis (nonparametric option)
# - Dunn's test (non-parametric, conduct after Kruskal-Wallis test)
# Sodium: Na+
# Summary stats
# General data
General_Samples %>%
group_by(Pregnant.Or.Atresia, Ambient.Or.OAH) %>%
summarize(count = n(),
median = round(median(Na...mmol.L.), 3),
mean = round(mean(Na...mmol.L.), 3),
sd = round(sd(Na...mmol.L.), 3),
cv = round(sd(Na...mmol.L.)/mean(Na...mmol.L.), 3)) %>%
ungroup()
# Ambient data
Ambient_Only_Samples %>%
group_by(Ambient.Or.OAH, Consensus_Brood_Condition) %>%
summarize(count = n(),
median = round(median(Na...mmol.L.), 3),
mean = round(mean(Na...mmol.L.), 3),
sd = round(sd(Na...mmol.L.), 3),
cv = round(sd(Na...mmol.L.)/mean(Na...mmol.L.), 3)) %>%
ungroup()
# Sodium: Na+
# Sodium boxplot: General samples
sodium_general_boxplot <- ggplot(data = General_Samples, aes(x = Pregnant.Or.Atresia, y = Na...mmol.L., fill = Ambient.Or.OAH)) +
geom_boxplot(aes(x = Pregnant.Or.Atresia, y = Na...mmol.L., fill = Ambient.Or.OAH)) +
geom_point(aes(color = Ambient.Or.OAH), position = position_dodge(width = 0.75), alpha = 0.3, color = "black") +
labs(title = "Sodium", x = "Parturition Type", y = "Sodium (mmol/L)") +
guides(fill = guide_legend((title = "Treatment Type"))) +
scale_fill_manual(values = c("Ambient" = "#189bff", "OAH" = "#598c78")) +
theme_classic() +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
legend.background = element_rect(fill = "white", color = "black"),
title = element_text(size = 12),
plot.title = element_text(size = 30, hjust = 0.5),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))
print(sodium_general_boxplot)
ggsave(filename = "data-images/sodium_general_boxplot.pdf", plot = sodium_general_boxplot, device = "pdf")
ggsave(filename = "data-images/sodium_general_boxplot.png", plot = sodium_general_boxplot, device = "png")
# Sodium boxplot: Ambient Samples
sodium_ambient_boxplot <- ggplot(data = Ambient_Only_Samples) +
geom_boxplot(aes(x = Consensus_Brood_Condition, y = Na...mmol.L.)) +
geom_point(aes(x = Consensus_Brood_Condition, y = Na...mmol.L.), alpha = 0.5, colour = "black") +
labs(title = "Sodium", x = "Parturition Success", y = "Sodium (mmol/L)") +
facet_wrap(~ Ambient.Or.OAH) +
theme_classic() +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
legend.background = element_rect(fill = "white", color = "black"),
title = element_text(size = 12),
plot.title = element_text(size = 30, hjust = 0.5),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))
print(sodium_ambient_boxplot)
ggsave(filename = "data-images/sodium_ambient_boxplot.pdf", plot = sodium_ambient_boxplot, device = "pdf")
ggsave(filename = "data-images/sodium_ambient_boxplot.png", plot = sodium_ambient_boxplot, device = "png")
# Sodium: Na+
# Parametric Assumptions
# Data Distribution
# Frequency Histograms
hist(General_Samples$Na...mmol.L.)
hist(Ambient_Only_Samples$Na...mmol.L.)
# Density Histogram
# Density vs normality curve histograms
# Notes: Maybe set geom_density(alpha = 0.5)?
General_Samples %>%
ggplot(aes(x = Na...mmol.L.)) +
geom_histogram(binwidth = 0.01) +
stat_function(fun = dnorm, args = c(mean = mean(General_Samples$Na...mmol.L.), sd = sd(General_Samples$Na...mmol.L.)), col = "green") +
geom_density(col = "black") +
labs(title = "Sodium General Sample Distribution")
# With legend label
General_Samples %>%
ggplot(aes(x = Na...mmol.L.)) +
geom_histogram(binwidth = 0.01) +
stat_function(fun = dnorm, args = c(mean = mean(General_Samples$Na...mmol.L.), sd = sd(General_Samples$Na...mmol.L.)), aes(col = "Normal Distribution"), show.legend = TRUE) +
geom_density(aes(col = "Sample Density"), show.legend = TRUE) +
labs(title = "Sodium General Sample Distribution") +
scale_color_manual("Distribution", values = c("Normal Distribution" = "green", "Sample Density" = "black"))
# Ambient_Only_Samples %>%
Ambient_Only_Samples %>%
ggplot(aes(x = Na...mmol.L.)) +
geom_histogram(binwidth = 0.01) +
stat_function(fun = dnorm, args = c(mean = mean(Ambient_Only_Samples$Na...mmol.L.), sd = sd(Ambient_Only_Samples$Na...mmol.L.)), col = "green") +
geom_density(col = "black") +
facet_grid(~ Ambient.Or.OAH) +
labs (title = "Sodium Ambient Sample Distribution")
# With legend label
Ambient_Only_Samples %>%
ggplot(aes(x = Na...mmol.L.)) +
geom_histogram(binwidth = 0.01) +
stat_function(fun = dnorm, args = c(mean = mean(Ambient_Only_Samples$Na...mmol.L.), sd = sd(Ambient_Only_Samples$Na...mmol.L.)), aes(col = "Normal Distribution"), show.legend = TRUE) +
geom_density(aes(col = "Sample Density"), show.legend = TRUE) +
labs(title = "Sodium Ambient Sample Distribution") +
scale_color_manual("Distribution", values = c("Normal Distribution" = "green", "Sample Density" = "black"))
# Sodium: Na+
# Parametric Assumptions:
# Assessing Normality
# Normality Plots
# Note: If data is non-normal considering applying transformation
# lm model of general data
sodium_lm_int <- lm(Na...mmol.L. ~ Pregnant.Or.Atresia * Ambient.Or.OAH, data = General_Samples)
# View all residual plots
#plot(sodium_lm_int)
sodium_res_int_qqplot <- ggqqplot(residuals(sodium_lm_int)) +
labs(title = "Sodium Interactive Residual QQplot",
subtitle = "lm(Na...mmol.L. ~ Parturition Outcome * Treatment)",
x = "Sodium Theoretical Quantiles (Predicted values)",
y = "Sodium Sample Quantiles") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
print(sodium_res_int_qqplot)
# Sodium: Na+
# Parametric Assumptions
# Assessing Normality
# Normality Plots
# lm model of ambient data
sodium_lm_ambient <- lm(Na...mmol.L. ~ Consensus_Brood_Condition, data = Ambient_Only_Samples)
# View all residual plots
#plot(sodium_lm_ambient)
sodium_res_ambient_qqplot <- ggqqplot(residuals(sodium_lm_ambient)) +
labs(title = "Sodium Parturition Success Residual QQplot",
subtitle = "lm(Sodium ~ Consensus_Brood_Condition)",
x = "Sodium Theoretical Quantiles (Predicted values)",
y = "Sodium Sample Quantiles") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
print(sodium_res_ambient_qqplot)
# Sodium: Na+
# Parametric Assumptions
# Assessing Normality
# Analytical Test: Options listed below
# - Shapiro Test = for piping, shapiro_test() or in base r shapiro.test(): normal distribution
# Note: Shapiro test is sensitive to sample size, small n often pass normality, so review both visuals and test results to assess if normality conditions are met or not
# Note Error Message: error in `shapiro.test()`: ! sample size must be between 3 and 5000
# Shapiro.test for General Samples
General_Samples %>% shapiro_test(Na...mmol.L.)
General_Samples %>%
group_by(Ambient.Or.OAH, Pregnant.Or.Atresia) %>%
shapiro_test(Na...mmol.L.)
# Shapito.test for Ambient Samples
Ambient_Only_Samples %>% shapiro_test(Na...mmol.L.)
# Ambient_Only_Samples %>%
#   group_by(Consensus_Brood_Condition) %>%
#   shapiro_test(Na...mmol.L.)
# Sodium: Na+
# Parametric Assumptions
# Assessing Normality
# Descriptive stat test: Stat.desc
# Z-score reflected in 'skew.2SE' and 'kurt.2SE'
# If these values are below 0.96 this indicates normality
# Note these values are sensitive to sample size, and are most effective for relatively small sample sizes approximately n = 30-50 range
# Note Alternative methods, all appear to display same results, not sure exactly how to incorporate an lm or aov model into the stat.desc function...
# General samples
General_Samples %>%
summarise(Na...mmol.L., Ambient.Or.OAH, Pregnant.Or.Atresia) %>%
stat.desc(norm = TRUE)
# Ambient samples
Ambient_Only_Samples %>%
summarise(Na...mmol.L., Brood_Condition) %>%
stat.desc(norm = TRUE)
# Sodium: Na+
# Parametric Assumptions
# Assessing Homoscedasticity: Equal Variance of Residuals
# Plotting residuals vs fitted
# Two-way ANOVA Interactive/Additive model: General factor comparison
lm(Na...mmol.L. ~ Pregnant.Or.Atresia * Ambient.Or.OAH, data = General_Samples) %>% plot()
# One-Way ANOVA model: Ambient Parturition Success comparison
lm(Na...mmol.L. ~ Consensus_Brood_Condition, data = Ambient_Only_Samples) %>%
plot()
# Sodium: Na+
# Scale location plot
# A flat line stat model is evidence of homoscedasticity, gentle or slight curves are generally accepted as equal variance across samples, however any large, drastic, or sharp changing features to the line suggest heteroscedasticity.
# The degree of slope of the stat model line to which we distinguish between equal or unequal variance across samples is unclear as of yet.
# Scale location plots
# General Samples
General_Samples %>%
mutate(predicted_values = fitted(sodium_lm_int),
residual_sqrt = sqrt(abs(rstandard(sodium_lm_int)))) %>%
ggplot(aes(predicted_values, residual_sqrt)) +
geom_point() +
geom_smooth()
# Compare residuals independently
# General treatment
General_Samples %>%
mutate(predicted_values = fitted(sodium_lm_int),
residual_sqrt = sqrt(abs(rstandard(sodium_lm_int)))) %>%
ggplot(aes(Ambient.Or.OAH, residual_sqrt)) +
geom_point() +
stat_summary(geom = "line", fun = mean, color = "red")
General_Samples %>%
mutate(predicted_values = fitted(sodium_lm_int),
residual_sqrt = sqrt(abs(rstandard(sodium_lm_int)))) %>%
ggplot(aes(as.numeric(as.factor(Ambient.Or.OAH)), residual_sqrt)) +
geom_point() +
stat_summary(geom = "line", fun = mean, color = "red")
# General parturition outcome
General_Samples %>%
mutate(predicted_values = fitted(sodium_lm_int),
residual_sqrt = sqrt(abs(rstandard(sodium_lm_int)))) %>%
ggplot(aes(Pregnant.Or.Atresia, residual_sqrt)) +
geom_point() +
stat_summary(geom = "line", fun = mean, color = "red")
General_Samples %>%
mutate(predicted_values = fitted(sodium_lm_int),
residual_sqrt = sqrt(abs(rstandard(sodium_lm_int)))) %>%
ggplot(aes(as.numeric(as.factor(Pregnant.Or.Atresia)), residual_sqrt)) +
geom_point() +
stat_summary(geom = "line", fun = mean, color = "red")
# Sodium: Na+
# Parametric Assumptions
# Assessing Homoscedasticity: Equal Variance of Residuals
# Testing scedasticity: Options listed below
# - F-test = var.test(): For normally distributed data with two groups only)
# - Bartlett's test = bartlett.test(): For normally distributed data with multiple groups. Sensitive to normality)
# - Levene's Test = leveneTest(): Similar to Bartlett's test, but more robust to variance, less sensitive to normality)
# - Fligner-Killeen test = fligner.test(): A nonparametric test, made to be even more robust against non-normal distributed data
# - Breusch Pagan test = library(lmtest) + bptest(): test for scedasticity in linear regression models
# Bartlett's test
# Note Error Code: Requires at least 2 obs per group
# General samples
bartlett.test(Na...mmol.L. ~ Ambient.Or.OAH, General_Samples)
bartlett.test(Na...mmol.L. ~ Pregnant.Or.Atresia, General_Samples)
leveneTest(Na...mmol.L. ~ Ambient.Or.OAH, General_Samples)
leveneTest(Na...mmol.L. ~ Pregnant.Or.Atresia, General_Samples)
# Ambient samples
#bartlett.test(Na...mmol.L. ~ Consensus_Brood_Condition, Ambient_Only_Samples)
leveneTest(Na...mmol.L. ~ Consensus_Brood_Condition, Ambient_Only_Samples)
# Sodium Analysis
# ANOVA Tests
# Testing general factor differences: Treatment & Parturition Outcome
# Two-Way ANOVA
sodium_aov_int <- aov(Na...mmol.L. ~ Pregnant.Or.Atresia * Ambient.Or.OAH, data = General_Samples)
summary(sodium_aov_int)
# If Interaction not significant (p-value > 0.05), use additive model
sodium_aov_additive <- aov(Na...mmol.L. ~ Pregnant.Or.Atresia + Ambient.Or.OAH, data = General_Samples)
summary(sodium_aov_additive)
# Post-Hoc Test:
# - Tukey's HSD test (parametric)
# - Scheirer-Ray-Hare test (non-parametric)
# - Aligned Ranked Transformation (ART): Nonparametric, robust against violations to normality and homoscedasticity
# - Ordinal Logistic Regression
# Tukey's Honestly Significant Difference Test (Parametric):
sodium_tukey_test <- TukeyHSD(sodium_aov_int)
print(sodium_tukey_test)
sodium_aov_int %>% tukey_hsd()
# Sodium: Na+
# ANOVA Tests
# Testing for differences in ambient parturition success metrics
# One-way ANOVA (parametric) or Kruskal-Wallis test (nonparametric)
sodium_aov_ambient <- aov(Na...mmol.L. ~ Consensus_Brood_Condition, data = Ambient_Only_Samples)
summary(sodium_aov_ambient)
# Post-Hoc Test:
# - Tukey's HSD (parametric, normality & equal variance across groups)
# - Kruskal Wallis (nonparametric option)
# - Dunn's test (non-parametric, conduct after Kruskal-Wallis test)
# Chloride: Cl-
# Summary stats
# General data
General_Samples %>%
group_by(Pregnant.Or.Atresia, Ambient.Or.OAH) %>%
summarize(count = n(),
median = round(median(Cl...mmol.L.), 3),
mean = round(mean(Cl...mmol.L.), 3),
sd = round(sd(Cl...mmol.L.), 3),
cv = round(sd(Cl...mmol.L.)/mean(Cl...mmol.L.), 3)) %>%
ungroup()
# Ambient data
Ambient_Only_Samples %>%
group_by(Ambient.Or.OAH, Consensus_Brood_Condition) %>%
summarize(count = n(),
median = round(median(Cl...mmol.L.), 3),
mean = round(mean(Cl...mmol.L.), 3),
sd = round(sd(Cl...mmol.L.), 3),
cv = round(sd(Cl...mmol.L.)/mean(Cl...mmol.L.), 3)) %>%
ungroup()
# Chloride: Cl-
# Chloride boxplot: General samples
chloride_general_boxplot <- ggplot(data = General_Samples, aes(x = Pregnant.Or.Atresia, y = Cl...mmol.L., fill = Ambient.Or.OAH)) +
geom_boxplot(aes(x = Pregnant.Or.Atresia, y = Cl...mmol.L., fill = Ambient.Or.OAH)) +
geom_point(aes(color = Ambient.Or.OAH), position = position_dodge(width = 0.75), alpha = 0.3, color = "black") +
labs(title = "Chloride", x = "Parturition Type", y = "Chloride (mmol/L)") +
guides(fill = guide_legend((title = "Treatment Type"))) +
scale_fill_manual(values = c("Ambient" = "#189bff", "OAH" = "#598c78")) +
theme_classic() +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
legend.background = element_rect(fill = "white", color = "black"),
title = element_text(size = 12),
plot.title = element_text(size = 30, hjust = 0.5),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))
print(chloride_general_boxplot)
ggsave(filename = "data-images/chloride_general_boxplot.pdf", plot = chloride_general_boxplot, device = "pdf")
ggsave(filename = "data-images/chloride_general_boxplot.png", plot = chloride_general_boxplot, device = "png")
# Chloride boxplot: Ambient Samples
chloride_ambient_boxplot <- ggplot(data = Ambient_Only_Samples) +
geom_boxplot(aes(x = Consensus_Brood_Condition, y = Cl...mmol.L.)) +
geom_point(aes(x = Consensus_Brood_Condition, y = Cl...mmol.L.), alpha = 0.5, colour = "black") +
labs(title = "Chloride", x = "Parturition Success", y = "Chloride (mmol/L)") +
facet_wrap(~ Ambient.Or.OAH) +
theme_classic() +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
legend.background = element_rect(fill = "white", color = "black"),
title = element_text(size = 12),
plot.title = element_text(size = 30, hjust = 0.5),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))
print(chloride_ambient_boxplot)
ggsave(filename = "data-images/chloride_ambient_boxplot.pdf", plot = chloride_ambient_boxplot, device = "pdf")
ggsave(filename = "data-images/chloride_ambient_boxplot.png", plot = chloride_ambient_boxplot, device = "png")
View(ABL90)
# Setup
knitr::opts_chunk$set(echo = TRUE)
# Load packages
library(gridExtra) # For using grid.table to save tables as images
library(flextable) # Alternative method to save df as image
library(tidyverse)
library(zoo)
library(lme4)
library(lmerTest)
library(rlang)
library(nortest) # For ad.test
library(car) # For homogeneity of variance with leveneTest
library(rcompanion) # For scheirerRayHare test
library(pastecs) # For stat.desc
library(ggpubr) # For assumption plots
library(conover.test) # For the conover.Iman() test function
library(DescTools) # Contain alternative ConoverTest function
library(rstatix) # tidyverse adapted stat tests and mshapiro_test() functions
# Read and call data into df
# Primary samples df
ABL90 <- read.csv("Raw_Data/ABL90_Raw.csv")
# River's Parturition metadata
partuition_subcat <- read.csv("Raw_Data/River's_Rockfish_Metadata_Parturition_V7.csv")
# Data sifting: ABL90 dataset
# Step 1: Remove missing info
ABL_set1 <- ABL90 %>%
filter(Patient.ID_edited != "")
# Step 2: Separate Patient.ID into columns of sample types: blood plasma and instant freeze plasma
ABL_set2 <- separate(ABL_set1, 'Patient.ID_edited', into = c("Patient.ID_edited", "Sample_Type"), sep = ",")
# Step 3:
# Convert Patient.ID_edited column data to character type
ABL_set2$Patient.ID_edited <- as.character(ABL_set2$Patient.ID_edited)
# Step 4 & 5: Sussing out specific sample errors
# Remove insufficient samples
ABL_set3 <- ABL_set2 %>%
filter(!is.na("Type")) %>%
filter(!str_detect(Errors.detected.during.measurement, "Insufficient sample"))
# Remove inhomogeneous samples
ABL_set3 <- ABL_set3 %>%
filter(!is.na("Type")) %>%
filter(!str_detect(Errors.detected.during.measurement, "Inhomogeneous sample"))
# Step 6: Filter for only blood samples
ABL_b_samp <- ABL_set3 %>%
filter(Sample_Type == "b")
# Rename columns to match: Change 'ID' in parturition_subcat to 'Patient.ID_edited' so it is ready to join with ABL90 df
# Please note the 'Treatment' col in parturition_subcat does not match with the finalized 'Ambient.Or.OAH' col in metadata_atresia_guide or ABL90_merged df
# Rename 'ID' col to 'patient.ID_edited'
partuition_subcat <- partuition_subcat %>%
rename(Patient.ID_edited = ID)
# Connect main ABL90 dataset with my (River's) sub categorized parturition metadata
# ABL_merged <- partuition_subcat %>%
# left_join(ABL_b_samp, by = "Patient.ID_edited")
ABL_merged <- ABL_b_samp %>%
inner_join(partuition_subcat, by = "Patient.ID_edited")
# Rename Treatment & Parturition Outcome
ABL_merged <- ABL_merged %>%
rename(Ambient.Or.OAH = Consensus_General_Treatment,
Pregnant.Or.Atresia = Consensus_Atresia_Or_Pregnant)
# Cross Check all Columns: Cross validation to suss correct replicate row
check_params <- ABL_merged %>%
select(Patient.ID_edited, Time, Sample.., Measuring.Mode, Ambient.Or.OAH, Pregnant.Or.Atresia, pH, Glu..mmol.L., Hct...., Na...mmol.L., Cl...mmol.L., K...mmol.L., Ca....mmol.L., pCO2..mmHg.) %>%
filter(Patient.ID_edited == "9782D")
print(check_params)
check_params <- ABL_merged %>%
select(Patient.ID_edited, Time, Sample.., Measuring.Mode, Ambient.Or.OAH, Pregnant.Or.Atresia, pH, Glu..mmol.L., Hct...., Na...mmol.L., Cl...mmol.L., K...mmol.L., Ca....mmol.L., pCO2..mmHg.) %>%
filter(Patient.ID_edited == "9783D")
print(check_params)
# Removed replicates: 9782D (2x) and 9783D (2x)
ABL_merged <- ABL_merged %>%
filter(Sample.. != "1016",
Sample.. != "863",
Sample.. != "934",
Sample.. != "860")
View(ABL90)
# Setup
knitr::opts_chunk$set(echo = TRUE)
# Load packages
library(gridExtra) # For using grid.table to save tables as images
library(flextable) # Alternative method to save df as image
library(tidyverse)
library(zoo)
library(lme4)
library(lmerTest)
library(rlang)
library(nortest) # For ad.test
library(car) # For homogeneity of variance with leveneTest
library(rcompanion) # For scheirerRayHare test
library(pastecs) # For stat.desc
library(ggpubr) # For assumption plots
library(conover.test) # For the conover.Iman() test function
library(DescTools) # Contain alternative ConoverTest function
library(rstatix) # tidyverse adapted stat tests and mshapiro_test() functions
# Read and call data into df
# Primary samples df
ABL90 <- read.csv("Raw_Data/ABL90_Raw.csv")
# River's Parturition metadata
partuition_subcat <- read.csv("Raw_Data/River's_Rockfish_Metadata_Parturition_V7.csv")
# Data sifting: ABL90 dataset
# Step 1: Remove missing info
ABL_set1 <- ABL90 %>%
filter(Patient.ID_edited != "")
# Step 2: Separate Patient.ID into columns of sample types: blood plasma and instant freeze plasma
ABL_set2 <- separate(ABL_set1, 'Patient.ID_edited', into = c("Patient.ID_edited", "Sample_Type"), sep = ",")
# Step 3:
# Convert Patient.ID_edited column data to character type
ABL_set2$Patient.ID_edited <- as.character(ABL_set2$Patient.ID_edited)
# Step 4 & 5: Sussing out specific sample errors
# Remove insufficient samples
ABL_set3 <- ABL_set2 %>%
filter(!is.na("Type")) %>%
filter(!str_detect(Errors.detected.during.measurement, "Insufficient sample"))
# Remove inhomogeneous samples
ABL_set3 <- ABL_set3 %>%
filter(!is.na("Type")) %>%
filter(!str_detect(Errors.detected.during.measurement, "Inhomogeneous sample"))
# Step 6: Filter for only blood samples
ABL_b_samp <- ABL_set3 %>%
filter(Sample_Type == "b")
# Rename columns to match: Change 'ID' in parturition_subcat to 'Patient.ID_edited' so it is ready to join with ABL90 df
# Please note the 'Treatment' col in parturition_subcat does not match with the finalized 'Ambient.Or.OAH' col in metadata_atresia_guide or ABL90_merged df
# Rename 'ID' col to 'patient.ID_edited'
partuition_subcat <- partuition_subcat %>%
rename(Patient.ID_edited = ID)
# Connect main ABL90 dataset with my (River's) sub categorized parturition metadata
# ABL_merged <- partuition_subcat %>%
# left_join(ABL_b_samp, by = "Patient.ID_edited")
ABL_merged <- ABL_b_samp %>%
inner_join(partuition_subcat, by = "Patient.ID_edited")
# Rename Treatment & Parturition Outcome
ABL_merged <- ABL_merged %>%
rename(Ambient.Or.OAH = Consensus_General_Treatment,
Pregnant.Or.Atresia = Consensus_Atresia_Or_Pregnant)
# Cross Check all Columns: Cross validation to suss correct replicate row
check_params <- ABL_merged %>%
select(Patient.ID_edited, Time, Sample.., Measuring.Mode, Ambient.Or.OAH, Pregnant.Or.Atresia, pH, Glu..mmol.L., Hct...., Na...mmol.L., Cl...mmol.L., K...mmol.L., Ca....mmol.L., pCO2..mmHg.) %>%
filter(Patient.ID_edited == "9782D")
print(check_params)
check_params <- ABL_merged %>%
select(Patient.ID_edited, Time, Sample.., Measuring.Mode, Ambient.Or.OAH, Pregnant.Or.Atresia, pH, Glu..mmol.L., Hct...., Na...mmol.L., Cl...mmol.L., K...mmol.L., Ca....mmol.L., pCO2..mmHg.) %>%
filter(Patient.ID_edited == "9783D")
print(check_params)
# Removed replicates: 9782D (2x) and 9783D (2x)
ABL_merged <- ABL_merged %>%
filter(Sample.. != "863",
Sample.. != "934")
# New df with Moralities removed: Note none of these samples made it into ABL90 df anyway, so looks like they are already filtered out.
Live_Samples <- ABL_merged %>%
filter(Patient.ID_edited != "9780C", # Mortality
Patient.ID_edited != "777AE", # Mortality
Patient.ID_edited != "777CA") # Mortality after parturition
# New df with mortality and 'No info' Id's removed
Primary_Samples <- Live_Samples %>%
filter(Patient.ID_edited != "777A0", # No info
Patient.ID_edited != "9782F", # No info
Patient.ID_edited != "777B3", # No info
Patient.ID_edited != "777AA", # No info
Patient.ID_edited != "777DE", # No info
Patient.ID_edited != "777CE", # No info
Patient.ID_edited != "777A6") # No info
# New df of Only Ambient Treatment: For testing parturition success
Ambient_Only_Samples <- Primary_Samples %>%
filter(Ambient.Or.OAH == "Ambient")
View(partuition_subcat)
